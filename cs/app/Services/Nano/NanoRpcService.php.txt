<?php

namespace App\Services\Nano;

use Illuminate\Support\Facades\Http;

class NanoRpcService
{
    protected $rpcUrl;
    
    public function __construct()
    {
        $this->rpcUrl = config('nano.rpc_url');
    }
    
    public function getAccountBalance($account)
    {
        $response = Http::post($this->rpcUrl, [
            'action' => 'account_balance',
            'account' => $account
        ]);
        
        if ($response->failed()) {
            return ['balance' => 0, 'pending' => 0];
        }
        
        return $response->json();
    }
    
    public function sendTransaction($walletId, $source, $destination, $amount)
    {
        // First, check if there are pending blocks to receive
        $pendingResponse = Http::post($this->rpcUrl, [
            'action' => 'pending',
            'account' => $source,
            'count' => '1',
            'threshold' => $amount
        ]);
        
        if ($pendingResponse->successful() && !empty($pendingResponse->json()['blocks'])) {
            // Receive pending blocks first
            foreach ($pendingResponse->json()['blocks'] as $block) {
                $receiveResponse = Http::post($this->rpcUrl, [
                    'action' => 'receive',
                    'wallet' => $walletId,
                    'account' => $source,
                    'block' => $block
                ]);
                
                if ($receiveResponse->failed()) {
                    throw new \Exception('Failed to receive pending blocks');
                }
            }
        }
        
        // Now send the transaction
        $response = Http::post($this->rpcUrl, [
            'action' => 'send',
            'wallet' => $walletId,
            'source' => $source,
            'destination' => $destination,
            'amount' => $amount,
            'id' => uniqid()
        ]);
        
        if ($response->failed()) {
            throw new \Exception('Failed to send transaction: ' . $response->body());
        }
        
        return $response->json();
    }
    
    public function getAccountHistory($account, $count = 10)
    {
        $response = Http::post($this->rpcUrl, [
            'action' => 'account_history',
            'account' => $account,
            'count' => $count
        ]);
        
        if ($response->failed()) {
            return [];
        }
        
        return $response->json()['history'] ?? [];
    }
}