<?php

namespace App\Services\Automation;

use App\Models\User;
use App\Models\AutomationSession;
use App\Services\Nano\NanoRpcService;
use Facebook\WebDriver\Remote\RemoteWebDriver;
use Facebook\WebDriver\Remote\DesiredCapabilities;
use Facebook\WebDriver\WebDriverBy;
use Facebook\WebDriver\WebDriverExpectedCondition;

class AutomationService
{
    protected $nanoRpcService;
    protected $seleniumHost;
    
    public function __construct(NanoRpcService $nanoRpcService)
    {
        $this->nanoRpcService = $nanoRpcService;
        $this->seleniumHost = config('automation.selenium_host');
    }
    
    public function startPlayNanoSession(User $user)
    {
        $session = AutomationSession::create([
            'user_id' => $user->id,
            'session_id' => uniqid(),
            'provider' => 'playnano',
            'status' => 'running'
        ]);
        
        try {
            // Initialize headless browser
            $driver = RemoteWebDriver::create(
                $this->seleniumHost, 
                DesiredCapabilities::chrome()
            );
            
            // Navigate to PlayNano with affiliate link
            $driver->get('https://playnano.online/offerwalls?ref=' . config('automation.playnano_affiliate'));
            
            // Perform login/signup automation
            $this->automatePlayNanoRegistration($driver, $user);
            
            // Start offerwalls automation
            $earnedAmount = $this->automateOfferwalls($driver);
            
            // Update session with results
            $session->update([
                'status' => 'completed',
                'earned_amount' => $earnedAmount,
                'ended_at' => now()
            ]);
            
            // Credit user's account
            if ($earnedAmount > 0) {
                $user->increment('total_earned', $earnedAmount);
                
                // Send to admin wallet (10% commission)
                $adminAmount = $earnedAmount * 0.1;
                $this->nanoRpcService->sendTransaction(
                    $user->nano_wallet_id,
                    $user->nano_address,
                    config('nano.admin_wallet'),
                    $adminAmount
                );
            }
            
            return $earnedAmount;
        } catch (\Exception $e) {
            $session->update([
                'status' => 'failed',
                'metadata' => ['error' => $e->getMessage()],
                'ended_at' => now()
            ]);
            
            return 0;
        } finally {
            if (isset($driver)) {
                $driver->quit();
            }
        }
    }
    
    protected function automatePlayNanoRegistration(RemoteWebDriver $driver, User $user)
    {
        // Check if already logged in
        try {
            $driver->findElement(WebDriverBy::className('user-avatar'));
            return; // Already logged in
        } catch (\Exception $e) {
            // Proceed with registration
        }
        
        // Click sign up button
        $driver->findElement(WebDriverBy::linkText('Sign Up'))->click();
        
        // Wait for form to appear
        $driver->wait()->until(
            WebDriverExpectedCondition::visibilityOfElementLocated(
                WebDriverBy::id('register-form')
            )
        );
        
        // Fill registration form
        $driver->findElement(WebDriverBy::name('username'))
              ->sendKeys($user->name . rand(100, 999));
        $driver->findElement(WebDriverBy::name('email'))
              ->sendKeys($user->email);
        $driver->findElement(WebDriverBy::name('password'))
              ->sendKeys(bin2hex(random_bytes(8))); // Random password
        $driver->findElement(WebDriverBy::name('nano_address'))
              ->sendKeys($user->nano_address);
        
        // Submit form
        $driver->findElement(WebDriverBy::cssSelector('#register-form button[type="submit"]'))
              ->click();
        
        // Wait for success
        $driver->wait()->until(
            WebDriverExpectedCondition::visibilityOfElementLocated(
                WebDriverBy::className('alert-success')
            )
        );
    }
    
    protected function automateOfferwalls(RemoteWebDriver $driver)
    {
        $totalEarned = 0;
        
        // Get all offerwalls
        $offerwalls = $driver->findElements(WebDriverBy::cssSelector('.offerwall-item'));
        
        foreach ($offerwalls as $offerwall) {
            try {
                $offerwall->click();
                
                // Switch to new window
                $windowHandles = $driver->getWindowHandles();
                $driver->switchTo()->window(end($windowHandles));
                
                // Wait for offerwall to load
                sleep(5);
                
                // Automate offerwall tasks
                $earned = $this->completeOfferwallTasks($driver);
                $totalEarned += $earned;
                
                // Close window and switch back
                $driver->close();
                $driver->switchTo()->window($windowHandles[0]);
            } catch (\Exception $e) {
                // Log error and continue with next offerwall
                continue;
            }
        }
        
        return $totalEarned;
    }
    
    protected function completeOfferwallTasks(RemoteWebDriver $driver)
    {
        // This would be customized per offerwall provider
        // Here's a generic approach
        
        $earned = 0;
        
        try {
            // Look for available tasks
            $tasks = $driver->findElements(WebDriverBy::cssSelector('.task-item'));
            
            foreach ($tasks as $task) {
                try {
                    $rewardText = $task->findElement(WebDriverBy::cssSelector('.task-reward'))
                                      ->getText();
                    $reward = floatval(preg_replace('/[^0-9.]/', '', $rewardText));
                    
                    // Click task
                    $task->click();
                    
                    // Switch to task window if needed
                    $windowHandles = $driver->getWindowHandles();
                    if (count($windowHandles) > 1) {
                        $driver->switchTo()->window(end($windowHandles));
                    }
                    
                    // Complete task (simplified - would need customization)
                    $this->completeGenericTask($driver);
                    
                    // Close task window if opened
                    if (count($windowHandles) > 1) {
                        $driver->close();
                        $driver->switchTo()->window($windowHandles[0]);
                    }
                    
                    $earned += $reward;
                } catch (\Exception $e) {
                    continue;
                }
            }
        } catch (\Exception $e) {
            // Couldn't find tasks
        }
        
        return $earned;
    }
    
    protected function completeGenericTask(RemoteWebDriver $driver)
    {
        // This would need to be customized per task type
        // Here's a simple approach for ad viewing
        
        try {
            // Wait for video player
            $driver->wait(10)->until(
                WebDriverExpectedCondition::presenceOfElementLocated(
                    WebDriverBy::tagName('video')
                )
            );
            
            // Wait for video to complete
            sleep(30);
            
            // Close any popups
            try {
                $driver->findElement(WebDriverBy::cssSelector('.close-btn'))->click();
            } catch (\Exception $e) {}
        } catch (\Exception $e) {
            // Not a video task
        }
    }
}